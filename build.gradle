buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net'}
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/'}
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.+'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

configurations {
    shadedLib
}


version = "${mod_version}"
group = 'kasuga.lib' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'kasuga_lib'

boolean isSdk = false
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
jarJar.enable()
minecraft {

    mappings channel: 'parchment', version: '2023.06.26-1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=kasuga.mixins.json'
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'kasuga_lib'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                kasuga_lib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=kasuga.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'kasuga_lib'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                kasuga_lib {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')
            arg '-mixin.config=kasuga.mixins.json'
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'kasuga_lib'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                kasuga_lib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg '-mixin.config=kasuga.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'kasuga_lib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                kasuga_lib {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache'
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
//    maven {
//        // location of the maven that hosts JEI files
//        name = "Progwml6 maven"
//        url = "https://dvs1.progwml6.com/files/maven/"
//    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
         url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'mali'
        url = "https://raw.github.com/MegumiKasuga/kasuga-maven/mali/"
    }

    mavenLocal()
    flatDir {
        dir('libs')
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.3'
    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    //    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    //    // at runtime, use the full JEI jar
    //    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    implementation "org.spongepowered:mixin:${mixin_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    testAnnotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation "org.projectlombok:lombok:1.18.34"
    annotationProcessor "org.projectlombok:lombok:1.18.34"

    // implementation files('libs/Mixed-Arithmetic-Logic-Interpreter-1.0.0.jar')

    minecraftLibrary ('org.lwjgl:lwjgl-yoga:3.3.1') {
        exclude group: 'org.lwjgl',module: 'lwjgl'
    };
    shadedLib('org.lwjgl:lwjgl-yoga:3.3.1'){
        exclude group: 'org.lwjgl',module: 'lwjgl'
    };

    implementation('io.netty:netty-codec-http:4.1.77.Final');

    minecraftLibrary ('io.netty:netty-codec-http:4.1.77.Final'){
        exclude group: 'io.netty', module:'netty-handler';
        exclude group: 'io.netty', module:'netty-handler-proxy';
        exclude group: 'io.netty', module:'netty-codec';
        exclude group: 'io.netty', module:'netty-transport';
        exclude group: 'io.netty', module:'netty-buffer';
        exclude group: 'io.netty', module:'netty-resolver';
        exclude group: 'io.netty', module:'netty-common';
    }

    shadedLib ('io.netty:netty-codec-http:4.1.77.Final') {
        exclude group: 'io.netty', module: 'netty-handler';
        exclude group: 'io.netty', module: 'netty-handler-proxy';
        exclude group: 'io.netty', module: 'netty-codec';
        exclude group: 'io.netty', module: 'netty-transport';
        exclude group: 'io.netty', module: 'netty-buffer';
        exclude group: 'io.netty', module: 'netty-resolver';
        exclude group: 'io.netty', module: 'netty-common';
    }

    minecraftLibrary "edu.carole:Mixed-Arithmetic-Logic-Interpreter:1.0.0"
    shadedLib(group: "edu.carole", name: "Mixed-Arithmetic-Logic-Interpreter", version: "[1.0.0, 2.0.0)") {
        exclude group: 'com.ibm.icu', module: 'icu4j'
    }

    // shadedLib("org.graalvm.polyglot:js-community:23.1.0");
    // implementation("org.graalvm.sdk:graal-sdk:22.0.2");
    minecraftLibrary 'com.caoccao.javet:javet-core:4.0.0' // Must-have
    minecraftLibrary 'com.caoccao.javet:javet-v8-linux-arm64:4.0.0'
    minecraftLibrary 'com.caoccao.javet:javet-v8-linux-x86_64:4.0.0'
    minecraftLibrary 'com.caoccao.javet:javet-v8-macos-arm64:4.0.0'
    minecraftLibrary 'com.caoccao.javet:javet-v8-macos-x86_64:4.0.0'
    minecraftLibrary 'com.caoccao.javet:javet-v8-windows-x86_64:4.0.0'

    shadedLib 'com.caoccao.javet:javet-core:4.0.0' // Must-have
    shadedLib 'com.caoccao.javet:javet-v8-windows-x86_64:4.0.0' // Currently, we only support Win x86-64 structure in main build

    shadedLib 'org.apache.httpcomponents:httpcore:4.4.14'
    shadedLib 'org.apache.httpcomponents:httpclient:4.5.13'


    // testImplementation "edu.carole:Mixed-Arithmetic-Logic-Interpreter:1.0.0"
    // clientAnnotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    // apiAnnotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
    minecraftLibrary "edu.carole:Mixed-Arithmetic-Logic-Interpreter:1.0.2"
    jarJar(group: "edu.carole", name: "Mixed-Arithmetic-Logic-Interpreter", version: "[1.0.0, 2.0.0)")
    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "kasuga_lib",
                "Specification-Vendor"    : "MegumiKasuga",
                "Specification-Version"   : "20", // We are version 18 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MegumiKasuga",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'kasuga.mixins.json'
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
if (!isSdk) {
    jar.finalizedBy('reobfShadowJar')
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

shadowJar{
    mergeServiceFiles() // To fix graal issue: https://github.com/oracle/graaljs/issues/125
    configurations = [project.configurations.shadedLib]
    archiveClassifier.set('');
    relocate 'org.graalvm', 'kasuga.lib.vendor_modules.org.graalvm'
    relocate 'com.oracle', 'kasuga.lib.vendor_modules.com.oracle'
    relocate 'com.ibm', 'kasuga.lib.vendor_modules.com.ibm'
    relocate ('io.netty.handler.codec.http', 'kasuga.lib.vendor_modules.io.netty.handler.codec.http');
    relocate ('io.netty.handler.codec.rtsp', 'kasuga.lib.vendor_modules.io.netty.handler.codec.rtsp');
    relocate ('io.netty.handler.codec.spdy', 'kasuga.lib.vendor_modules.io.netty.handler.codec.spdy');
    relocate('interpreter','kasuga.lib.vendor_modules.interpreter');
    relocate('org.apache', 'kasuga.lib.vendor_modules.org.apache');
    // relocate ('com.caoccao.javet', 'kasuga.lib.vendor_modules.com.caoccao.javet');
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf{
    shadowJar {}
}


java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact javadocJar
            // artifact javadocJar
            groupId = "kasuga.lib"
            artifactId = "kasuga_lib"
            version = "0.13"

            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
//        maven {
//            name "github"
//            url "https://maven.pkg.github.com/KasugaLibGroup/"
//            credentials {
//                username = USERNAME
//                password = TOKEN
//            }
//        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

mixin {
    add sourceSets.main, 'kasuga.refmap.json'
    config 'kasuga.mixins.json'
}
